entities:

  seaf.ba.parties:
    title: Участники

    schema:

      type: object
      patternProperties:
        "[a-zA-Z0-9_]*(\\.[a-zA-Z0-9_]*)*$":
          type: object
          properties:
            title:
              title: Наименование Участника
              description: Юрлицо, Группа, объединение, сегмент, оргединица
              type: string
            has_interest:
              title: Интересующие продукты
              description: Продукты, потребляемые или потенциально интересные Участнику
              type: array
              items:
                type: object
                properties:
                  id:
                    title: Идентификатор продукта
                    $ref: "#/$rels/seaf.ba.products.product"
                required:
                  - id
            accepts:
              title: для
              description: отношение Ресурс - для кого? -> для Участника
              type: array
              items:
                $ref: "#/properties/seaf.ba.resources/$resources"
            feeds:
              title: передает
              description: отношение Участникк -передает или отчуждает что? -> Ресурс
              type: array
              items:
                $ref: "#/properties/seaf.ba.resources/$resources"
            is_part_of:
              title: Является частью
              description: Отношение n к 1 для описания строгих иерархических связей
              $ref: "#/$rels/seaf.ba.parties.party"
            relates_to:
              title: Агрегирующая сущность
              description: Отношение n к m для описания множественных категорий (фасетных признаков)
              type: array
              items:
                $ref: "#/$rels/seaf.ba.parties.party"
          required:
            - title
    objects:
      party:
        route: "/"
        title: Участник
        symbol: "party"

    presentations:

      org_str_wrapper:
        title: Оргструктура
        type: markdown
        template: templates/org_str_wrapper.md

      org_str_graph:
        title: Оргструктура (граф)
        type: smartants
        source: >
          (
            $parties:= $spread($."seaf.ba.parties").[$~>|$.*|{"entity_id": "parties"}|];

            $getSymbol:= function($title, $entity_id, $symbol_width) {(
                $symbol_title:= $split($entity_id, ".")[-1];
                $symbol_obj:= $eval("$.\"seaf.icons\"." & $symbol_title);
                $symbol_gliph:= $symbol_obj.gliph;
                $symbol_template:= $symbol_gliph ?
                  $match($symbol_gliph, /^(<svg)[^>]+>/, 1).match &
                  '<rect x="0" y="-960" width={{vbWidth}} height="960" rx="300" fill="' & $symbol_obj.back_color & '"/>' &
                  '<text style="font-size:800px;" x="1200" y="-250" fill="' & $symbol_obj.fore_color & '" font-family="monospace">{{title}}</text>' &
                  $match($symbol_gliph, /(<path)[^>]+>/, 1).match &
                  '</svg>'
                ;
                $symbol_template:= $symbol_template
                    ? $symbol_template
                    : $."seaf.icons".no_icon;
                $symbol_svg:= $replace($symbol_template, /\{\{title\}\}/, $title);
                $symbol_svg:= $replace($symbol_svg, /\{\{fore_color\}\}/, $symbol_obj.fore_color);
                $symbol_svg:= $replace($symbol_svg, /\{\{back_color\}\}/, $symbol_obj.back_color);
                $symbol_svg:= $replace($symbol_svg, /\{\{absWidth\}\}/, $string($symbol_width));
                $symbol_svg:= $replace($symbol_svg, /\{\{vbWidth\}\}/, $string(4000*$symbol_width/100));
                {"title": $symbol_title & "_" & $title, "svg": $symbol_svg}
            )};



            $pre_nodes:= $parties.$map($, function($v) {(
                $title:= $v.*.title;
                $size:= $length($title);
                $symbol_width:= 25 + ($size > 7 ? $size*14 : $size*16 );
                $symbol:= $getSymbol($title, $v.*.entity_id, $symbol_width);
                { "nodes": {
                      ($split($v.$keys(), ".")[-1] ? $split($v.$keys(), ".")[-1] : $v.$keys()): {
                          "title": $title, 
                          "symbol": $symbol.title}
                      },
                   "links": $append(
                              $v.*.is_part_of ?
                                [
                                    { "from": ($split($v.$keys(), ".")[-1] ? $split($v.$keys(), ".")[-1] : $v.$keys()),
                                      "to": ($split($v.*.is_part_of, ".")[-1] ? $split($v.*.is_part_of, ".")[-1] : $v.*.is_part_of),
                                      "title": "является частью",
                                      "style": "->"
                                    }

                                ] : [],

                              $map($v.*.relates_to, function($vv) {
                                $vv ?
                                  { "from": ($split($v.$keys(), ".")[-1] ? $split($v.$keys(), ".")[-1] : $v.$keys()),
                                    "to": ($split($vv, ".")[-1] ? $split($vv, ".")[-1] : $vv),
                                    "title": "относится к",
                                    "style": "-[#green]->"
                                  }
                              })
                            ),   

                  "symbols": {
                      $symbol.title: $symbol.svg}
                };
            )});

            {"config": {
              "distance": 10,
              "trackWidth": 24,
              "hideLeafTitles": true
              },
             "symbols": $merge($pre_nodes.symbols), 
             "nodes": $merge($pre_nodes.nodes),
             "links": [$pre_nodes.links]
            } 
          )

