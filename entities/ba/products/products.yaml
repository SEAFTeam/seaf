entities:
  seaf.ba.products:
    title: Продукты
    schema:
      type: object
      patternProperties:
        "[a-zA-Z0-9_]*(\\.[a-zA-Z0-9_]*)*$":
          type: object
          properties:
            title:
              title: Наименование
              type: string
            description:
              title: Описание
              type: string
            owner:
              title: Владелец продукта
              type: string
              $ref: "#/$rels/seaf.ba.parties.party"
            receives:
              title: поступает на вход
              description: Ресурс - идет на вход чему? -> Продукту
              type: array
              items:
                $ref: "#/properties/seaf.ba.resources/$resources"
            delivers:
              title: предоставляет
              description: отношение Продукт - предоставляет  что? -> Ресурс
              type: array
              items:
                $ref: "#/properties/seaf.ba.resources/$resources"
            used_in:
              title: используется в
              type: array
              items:
                $ref: "#/$rels/seaf.ba.products.product"

          required:
            - title
            - owner
    objects:
      product:
        route: "/"
        title: Продукт-услуга
        symbol: "prd"

    presentations:

      landscape_wrapper:
        title: Продуктовый ландшафт
        type: markdown
        template: templates/landscape_wrapper.md

      landscape_graph:
        title: Продуктовый ландшафт (граф)
        type: smartants
        source: >
          (
            $parties:= $spread($."seaf.ba.parties").[$~>|$.*|{"entity_id": "parties"}|];
            $products:= $spread($."seaf.ba.products").[$~>|$.*|{"entity_id": "products"}|];

            $getSymbol:= function($title, $entity_id, $symbol_width) {(
                $symbol_title:= $split($entity_id, ".")[-1];
                $symbol_obj:= $eval("$.\"seaf.icons\"." & $symbol_title);
                $symbol_gliph:= $symbol_obj.gliph;
                $symbol_template:= $symbol_gliph ?
                  $match($symbol_gliph, /^(<svg)[^>]+>/, 1).match &
                  '<rect x="0" y="-960" width={{vbWidth}} height="960" rx="300" fill="' & $symbol_obj.back_color & '"/>' &
                  '<text style="font-size:800px;" x="1200" y="-250" fill="' & $symbol_obj.fore_color & '" font-family="monospace">{{title}}</text>' &
                  $match($symbol_gliph, /(<path)[^>]+>/, 1).match &
                  '</svg>'
                ;
                $symbol_template:= $symbol_template
                    ? $symbol_template
                    : $."seaf.icons".no_icon;
                $symbol_svg:= $replace($symbol_template, /\{\{title\}\}/, $title);
                $symbol_svg:= $replace($symbol_svg, /\{\{fore_color\}\}/, $symbol_obj.fore_color);
                $symbol_svg:= $replace($symbol_svg, /\{\{back_color\}\}/, $symbol_obj.back_color);
                $symbol_svg:= $replace($symbol_svg, /\{\{absWidth\}\}/, $string($symbol_width));
                $symbol_svg:= $replace($symbol_svg, /\{\{vbWidth\}\}/, $string(4000*$symbol_width/100));
                {"title": $symbol_title & "_" & $title, "svg": $symbol_svg}
            )};


            $parties_products:= $append($parties, $products);

            $pre_nodes:= $parties_products.$map($, function($v) {(
                $title:= $v.*.title;
                $size:= $length($title);
                $symbol_width:= 25 + ($size > 7 ? $size*14 : $size*16 );
                $symbol:= $getSymbol($title, $v.*.entity_id, $symbol_width);
                { "nodes": {
                      ($split($v.$keys(), ".")[-1] ? $split($v.$keys(), ".")[-1] : $v.$keys()): {
                          "title": $title, 
                          "symbol": $symbol.title}
                      },
                   "links": $append(
                              $v.*.owner ?
                                [
                                    { "from": ($split($v.$keys(), ".")[-1] ? $split($v.$keys(), ".")[-1] : $v.$keys()),
                                      "to": ($split($v.*.owner, ".")[-1] ? $split($v.*.owner, ".")[-1] : $v.*.owner),
                                      "title": "владелец",
                                      "style": "->"
                                    }

                                ] : [],

                              $map($v.*.has_interest, function($vv) {
                                $count($vv)>0 ?
                                  { "from": ($split($v.$keys(), ".")[-1] ? $split($v.$keys(), ".")[-1] : $v.$keys()),
                                    "to": ($split($vv.id, ".")[-1] ? $split($vv.id, ".")[-1] : $vv.id),
                                    "title": "заинтересован",
                                    "style": "-[#green]->"
                                  
                                  }
                              })
                            ),   

                  "symbols": {
                      $symbol.title: $symbol.svg}
                };
            )});

            {"config": {
              "distance": 10,
              "trackWidth": 24,
              "hideLeafTitles": true
              },
             "symbols": $merge($pre_nodes.symbols), 
             "nodes": $merge($pre_nodes.nodes),
             "links": [$pre_nodes.links]
            } 
          )


